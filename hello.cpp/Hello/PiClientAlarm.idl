///////////////////////////////////////////////////////////////////////////////
//
//  $Workfile:$
//
//  Description:.
//        Defines the Plug-in side of the Benchmark/Plug-in *Config* interface
//
//    $Author:$
//  $Revision:$
//      $Date:$
//
//  Copyright 2011 Speedline Technologies, Inc.
//
///////////////////////////////////////////////////////////////////////////////
import "PiDefine.idl";

/*!
    An RPC interface to allow Benchmark to notify a Plug-in of alarm related events.
    If a Plug-in wishes to receive alarm notifications from Benchmark it must implement this interface and set ePINotifyTypeAlarm in PICliConnectIF::RpcPIGetNotificationList.
*/
[
uuid(0ce5b325-f62c-4270-bea3-558fdfd55683),
version(1.0)
]
interface PICliAlarmInterface
{
    /*!
    \b Schema1 Called whenever an alarm is triggered.
    */
    void RpcPIAlarmTriggered 
    (
        [in] PCONTEXT_HDL_TYPE phContext,					/*!< The context handle for the plug-in. */
        [in] hyper i64Timestamp,							/*!< Time stamp of when the call was made (The number of seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC)). */
        [in] long lAlarmId,									/*!< The alarm identifier.  Each alarm instance has it's own unique identifier arbitrarily assigned at runtime by Benchmark. */   
        [in] EPIAlarmType eAlarmType,						/*!< The high level type of alarm (see definition of \ref EPIAlarmType) */
        [in] EPIAlarmSubType eAlarmSubType,					/*!< Subtype of alarm (see definition of \ref EPIAlarmSubType) */ 
        [in] EPIAlarmSeverity eSeverity,					/*!< The alarm's severity (see definition of \ref EPIAlarmSeverity) */   
        [in] short sTextLen,								/*!< Number of characters in usText. */
        [in, size_is(sTextLen)] unsigned short usText[*],   /*!< Nul terminated Unicode string of the alarm's message text. */

		[in] short sPluginBindingLen,											/*!< Number of characters in usBinding. */
        [in, size_is(sPluginBindingLen)] unsigned short usPluginBinding[*],		/*!< Nul terminated binding string of the originating plug-in - if eAlarmType equals ePIAlarmTypePlugin. */

		[in] short sPluginNameLen,												/*!< Number of characters in usPluginName. */
        [in, size_is(sPluginNameLen)] unsigned short usPluginName[*],			/*!< Nul terminated name string of the originating plug-in - if eAlarmType equals ePIAlarmTypePlugin. */

        [in] hyper i64UserData													/*!< A 64 bit value associated with alarms generated by Plugins. */
    );

    /*!
    \b Schema1 Called when the state of an alarm changes (i.e. cleared by operator).
    */
    void RpcPIAlarmChange
    (
        [in] PCONTEXT_HDL_TYPE phContext,					/*!< The context handle for the plug-in. */                
        [in] hyper i64Timestamp,			/*!< Time stamp of when the call was made (The number of seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC)). */
        [in] long lAlarmId,					/*!< The alarm identifier */
        [in] EPIAlarmAction eAction         /*!< (see definition of \ref EPIAlarmAction) */
    );

    /*!
    \b Schema1 Called when the state of the alarm system changes.
    */
    void RpcPIAlarmSysStateChange
    (
        [in] PCONTEXT_HDL_TYPE phContext,						/*!< The context handle for the plug-in. */
        [in] hyper i64Timestamp,				/*!< Time stamp of when the call was made (The number of seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC)). */
        [in] EPIAlarmSysState eNewState			/*!< The overall alarm state of the system (see definition of \ref EPIAlarmSysState) */
    );
}
